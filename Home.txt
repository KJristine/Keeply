import Typo from "@/components/Typo";
import { db } from "@/config/firebase";
import { colors } from "@/constants/theme";
import { useAuth } from "@/context/AuthContext";
import { Ionicons } from "@expo/vector-icons";
import { useFocusEffect } from "expo-router";
import {
  collection,
  doc,
  getDocs,
  query,
  updateDoc,
  where,
} from "firebase/firestore";
import React, { useCallback, useEffect, useState } from "react";
import {
  ActivityIndicator,
  FlatList,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";

interface Task {
  id: string;
  title: string;
  completed: boolean;
  userId: string;
  createdAt: any;
}

const Home = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("todos");
  const { user } = useAuth();

  // Calculate completion percentage
  const completedTasks = tasks.filter((task) => task.completed).length;
  const totalTasks = tasks.length;
  const completionPercentage =
    totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;

  const fetchTasks = useCallback(async () => {
    if (!user) {
      setTasks([]);
      setLoading(false);
      return;
    }

    setLoading(true);
    try {
      const tasksRef = collection(db, "tasks");
      // Modified query to avoid using orderBy which requires an index
      const q = query(tasksRef, where("userId", "==", user.uid));

      const querySnapshot = await getDocs(q);
      const tasksList: Task[] = [];

      querySnapshot.forEach((doc) => {
        const data = doc.data();
        tasksList.push({
          id: doc.id,
          title: data.title,
          completed: data.completed,
          userId: data.userId,
          createdAt: data.createdAt,
        });
      });

      // Sort in memory instead of using orderBy in the query
      tasksList.sort((a, b) => {
        const dateA = a.createdAt?.toMillis
          ? a.createdAt.toMillis()
          : typeof a.createdAt === "number"
          ? a.createdAt
          : 0;
        const dateB = b.createdAt?.toMillis
          ? b.createdAt.toMillis()
          : typeof b.createdAt === "number"
          ? b.createdAt
          : 0;
        return dateB - dateA; // descending order
      });

      setTasks(tasksList);
    } catch (error) {
      console.error("Error fetching tasks:", error);
    } finally {
      setLoading(false);
    }
  }, [user]);

  // Fetch tasks when the component mounts
  useEffect(() => {
    fetchTasks();
  }, [fetchTasks]);

  // Refresh tasks when the screen comes into focus
  useFocusEffect(
    useCallback(() => {
      fetchTasks();
    }, [fetchTasks])
  );

  const toggleTaskCompletion = async (taskId: string, completed: boolean) => {
    try {
      await updateDoc(doc(db, "tasks", taskId), {
        completed: !completed,
      });

      // Update local state
      setTasks(
        tasks.map((task) =>
          task.id === taskId ? { ...task, completed: !completed } : task
        )
      );
    } catch (error) {
      console.error("Error updating task:", error);
    }
  };

  const getFilteredTasks = () => {
    switch (activeTab) {
      case "todos":
        return tasks;
      case "ongoing":
        return tasks.filter((task) => !task.completed);
      case "completed":
        return tasks.filter((task) => task.completed);
      default:
        return tasks;
    }
  };

  // Function to get active tab background color
  const getActiveTabStyle = (tab: "todos" | "ongoing" | "completed") => {
    if (tab === activeTab) {
      switch (tab) {
        case "todos":
          return { backgroundColor: "#3B82F6" }; // Blue
        case "ongoing":
          return { backgroundColor: "#EF4444" }; // Red
        case "completed":
          return { backgroundColor: "#10B981" }; // Green
        default:
          return { backgroundColor: "#FFF" };
      }
    }
    return null;
  };

  // Function to get active tab text color
  const getActiveTabTextStyle = (tab: "todos" | "ongoing" | "completed") => {
    if (tab === activeTab) {
      return { color: "#FFFFFF", fontFamily: "Nunito_700Bold" };
    }
    return null;
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.brandText}>keeply.</Text>
      </View>

      {/* Title Section */}
      <View style={styles.titleContainer}>
        <Text style={styles.title}>Tasks</Text>
      </View>

      <View style={styles.contentContainer}>
        {/* Tab Navigation */}
        <View style={styles.tabContainer}>
          <TouchableOpacity
            style={[styles.tabButton, getActiveTabStyle("todos")]}
            onPress={() => setActiveTab("todos")}
          >
            <Text style={[styles.tabText, getActiveTabTextStyle("todos")]}>
              To Do list
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tabButton, getActiveTabStyle("ongoing")]}
            onPress={() => setActiveTab("ongoing")}
          >
            <Text style={[styles.tabText, getActiveTabTextStyle("ongoing")]}>
              Ongoing
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.tabButton, getActiveTabStyle("completed")]}
            onPress={() => setActiveTab("completed")}
          >
            <Text style={[styles.tabText, getActiveTabTextStyle("completed")]}>
              Completed
            </Text>
          </TouchableOpacity>
        </View>

        {/* Progress Bar */}
        <View style={styles.progressBarContainer}>
          <View
            style={[styles.progressBar, { width: `${completionPercentage}%` }]}
          >
            <Text style={styles.progressText}>{completionPercentage}%</Text>
          </View>
        </View>

        {/* Task List */}
        {loading ? (
          <View style={styles.loaderContainer}>
            <ActivityIndicator size="large" color={colors.lightpink} />
            <Typo style={styles.loaderText}>Loading tasks...</Typo>
          </View>
        ) : (
          <FlatList
            data={getFilteredTasks()}
            keyExtractor={(item) => item.id}
            contentContainerStyle={styles.taskListContainer}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={[
                  styles.taskItem,
                  item.completed ? styles.completedTask : styles.incompleteTask,
                ]}
                onPress={() => toggleTaskCompletion(item.id, item.completed)}
                activeOpacity={0.8}
              >
                <Text style={styles.taskText}>{item.title}</Text>
                <TouchableOpacity
                  style={styles.checkboxContainer}
                  onPress={() => toggleTaskCompletion(item.id, item.completed)}
                >
                  {item.completed ? (
                    <View style={styles.checkbox}>
                      <Ionicons
                        name="checkmark-outline"
                        size={18}
                        color="#fff"
                      />
                    </View>
                  ) : (
                    <View style={styles.checkboxEmpty} />
                  )}
                </TouchableOpacity>
              </TouchableOpacity>
            )}
            ListEmptyComponent={() => (
              <View style={styles.emptyContainer}>
                <Ionicons name="list-outline" size={60} color="#E0E0E0" />
                <Text style={styles.emptyText}>
                  {activeTab === "completed"
                    ? "No completed tasks yet"
                    : activeTab === "ongoing"
                    ? "No ongoing tasks"
                    : "No tasks yet. Create your first task!"}
                </Text>
              </View>
            )}
          />
        )}
      </View>
    </SafeAreaView>
  );
};

export default Home;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    paddingHorizontal: 16,
  },
  header: {
    padding: 16,
  },
  brandText: {
    fontSize: 30,
    fontWeight: "700",
    color: colors.textBlack,
    fontFamily: "Nunito_700Bold",
  },
  titleContainer: {
    marginBottom: 20,
    marginTop: 4,
    paddingHorizontal: 16,
  },
  title: {
    fontSize: 45,
    fontWeight: "800",
    marginBottom: 0,
    fontFamily: "Nunito_800ExtraBold",
    color: "#1F2937",
    marginLeft: 5,
  },
  contentContainer: {
    paddingHorizontal: 16, // Added consistent padding for all content
    flex: 1,
  },
  tabContainer: {
    flexDirection: "row",
    marginVertical: 16,
    backgroundColor: "#F3F4F6",
    borderRadius: 12, // Slightly rounder corners
    overflow: "hidden",
    borderWidth: 0, // Removed border for cleaner look
    elevation: 2, // Added shadow on Android
    shadowColor: "#000", // iOS shadow
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  tabButton: {
    flex: 1,
    paddingVertical: 14, // Slightly taller for better touch targets
    alignItems: "center",
    justifyContent: "center",
  },
  activeTab: {
    backgroundColor: "#FFF",
  },
  tabText: {
    fontSize: 14,
    fontFamily: "Nunito_600SemiBold",
    color: "#6B7280",
  },
  activeTabText: {
    color: "#1F2937",
    fontFamily: "Nunito_700Bold",
  },
  progressBarContainer: {
    height: 36,
    backgroundColor: "#F3F4F6",
    borderRadius: 18,
    overflow: "hidden",
    marginBottom: 20,
    borderWidth: 0, // Removed border for cleaner look
    elevation: 1,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
  },
  progressBar: {
    height: "100%",
    backgroundColor: colors.lightpink,
    borderRadius: 18,
    justifyContent: "center",
    minWidth: 40,
    borderWidth: 0, // Removed border for cleaner look
  },
  progressText: {
    color: "#FFF",
    fontSize: 14,
    fontWeight: "600",
    fontFamily: "Nunito_600SemiBold",
    marginLeft: 12,
  },
  taskListContainer: {
    paddingVertical: 10,
  },
  taskItem: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 16,
    paddingVertical: 16, // Increased for better spacing
    borderRadius: 12, // Consistent with other elements
    marginBottom: 12, // Increased for better separation
    elevation: 1, // Slight shadow for depth
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 1,
  },
  completedTask: {
    backgroundColor: "#ECFDF5", // Softer green
  },
  incompleteTask: {
    backgroundColor: "#FEF2F2", // Softer red
  },
  taskText: {
    flex: 1,
    fontSize: 16,
    fontFamily: "Nunito_500Medium", // Medium weight for better readability
    color: "#1F2937",
    paddingRight: 8, // Added space between text and checkbox
  },
  checkboxContainer: {
    padding: 4,
  },
  checkbox: {
    width: 24,
    height: 24,
    borderRadius: 6, // Slightly sharper corners
    backgroundColor: "#10B981", // Matching tab color
    alignItems: "center",
    justifyContent: "center",
    elevation: 2,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
  },
  checkboxEmpty: {
    width: 24,
    height: 24,
    borderRadius: 6, // Slightly sharper corners
    borderWidth: 2,
    borderColor: "#9CA3AF", // Lighter border color
    backgroundColor: "#FFF",
  },
  loaderContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  loaderText: {
    marginTop: 10,
    fontSize: 16,
    color: "#6B7280",
    fontFamily: "Nunito_400Regular",
  },
  emptyContainer: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: 60,
  },
  emptyText: {
    fontSize: 16,
    color: "#6B7280",
    fontFamily: "Nunito_400Regular",
    textAlign: "center",
    marginTop: 16,
    paddingHorizontal: 20,
  },
});
